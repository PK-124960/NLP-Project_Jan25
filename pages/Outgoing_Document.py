import streamlit as st
import numpy as np
import json
import requests
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer
from io import BytesIO
from docx import Document
from docx.shared import Pt

# ---------- CONFIG ----------
st.set_page_config(page_title="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å (Outgoing Letter)", layout="wide")

# ---------- CUSTOM EARTH THEME ----------
st.markdown("""
    <style>
        [data-testid="stAppViewContainer"] > .main {
            background-color: #F5F5DC;
        }
        .earth-card {
            background-color: #FAF0E6;
            padding: 20px;
            border-radius: 12px;
            border: 2px solid #D2B48C;
            margin-bottom: 20px;
        }
        h3, h2, h1 {
            color: #5B4636;
        }
        .stButton>button {
            background-color: #8FBC8F;
            color: white;
            border-radius: 10px;
            padding: 10px 20px;
            font-weight: bold;
        }
        .stButton>button:hover {
            background-color: #6B8E23;
        }
    </style>
""", unsafe_allow_html=True)

# ---------- FUNCTIONS for Section 1 ----------
def create_prompt_fewshot(input_sec2, input_sec1):
    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏ó‡∏´‡∏≤‡∏£
‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£
‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON

‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡∏ö‡∏ó ‡πÉ‡∏Ñ‡∏£ ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏£ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ:
\"\"\"{input_sec2}\"\"\"

‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á:
\"\"\"{input_sec1}\"\"\"

‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1 ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 
‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ : ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á :
‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠
"""
    return prompt

def abstractive_summarize(input_sec2, input_sec1, temperature=0.2):
    url = "http://localhost:11434/api/generate"
    prompt = create_prompt_fewshot(input_sec2, input_sec1)

    payload = {
        "model": "wangchanglm",
        "prompt": prompt,
        "temperature": temperature,
        "stream": True
    }
    response = requests.post(url, json=payload, stream=True)

    collected_response = ""
    for line in response.iter_lines():
        if line:
            decoded_line = line.decode('utf-8')
            data = json.loads(decoded_line)
            if 'response' in data:
                collected_response += data['response']

    return collected_response.strip()

def calculate_cosine_similarity(text1, text2):
    emb1 = similarity_model.encode(text1)
    emb2 = similarity_model.encode(text2)
    score = cosine_similarity([emb1], [emb2])[0][0]
    return score

# ---------- FUNCTIONS for Section 2 ----------

def create_prompt_for_fact(input_sec1):
    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏ó‡∏´‡∏≤‡∏£
‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "‡∏Ç‡πâ‡∏≠ ‡πë" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô "‡∏Ç‡πâ‡∏≠ ‡πí" ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

- ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡∏≤‡∏á‡∏ó‡∏´‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
- ‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£
- ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏¥‡πà‡∏ô‡πÄ‡∏¢‡πâ‡∏≠
- ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÑ‡∏°‡πà‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢)
- ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï
- ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠ ‡πë ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á
- ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£

‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠ ‡πë:
\"\"\"{input_sec1}\"\"\"

‡πÇ‡∏õ‡∏£‡∏î‡∏£‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ ‡πí ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô
"""
    return prompt

def generate_fact_from_sec1(input_sec1):
    url = "http://localhost:11434/api/generate"
    prompt = create_prompt_for_fact(input_sec1)

    payload = {
        "model": "wangchanglm",
        "prompt": prompt,
        "temperature": 0.2,
        "stream": True
    }
    response = requests.post(url, json=payload, stream=True)

    collected_response = ""
    for line in response.iter_lines():
        if line:
            decoded_line = line.decode('utf-8')
            data = json.loads(decoded_line)
            if 'response' in data:
                collected_response += data['response']

    return collected_response.strip()

# ---------- FUNCTIONS for Section 3 ----------

def create_prompt_for_section3(input_sec1, input_sec2, with_feedback=False):
    base_prompt = f"""
<fact>
‡∏Ç‡πâ‡∏≠ ‡πë: {input_sec1}

‡∏Ç‡πâ‡∏≠ ‡πí: {input_sec2}
</fact>

<instruction>
‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£ (‡∏Ç‡πâ‡∏≠ ‡πì) ‡πÇ‡∏î‡∏¢‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
- ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠ ‡πÜ: 3.1, 3.2, 3.3
- ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ç‡πâ‡∏≠
- ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏±‡πâ‡∏ô ‡πÜ (1‚Äì2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠ ‡πë ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠ ‡πí
- ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡πâ‡∏≤‡∏¢
</instruction>
"""

    if with_feedback:
        feedback_example = """
<example>
2.1 ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç ‡∏ú‡∏ö.‡∏£‡∏£.‡∏ä‡∏ó. ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÅ‡∏ó‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏û‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ø ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ 1
2.2 ‡∏Å‡∏™‡∏ô.‡∏Ø ‡∏à‡∏±‡∏î‡∏£‡∏ñ‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏û‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ø
2.3 ‡∏ú‡∏ò‡∏Å.‡∏Ø ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏ì‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå (ECM) ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ
</example>
"""
        base_prompt = feedback_example.strip() + "\n" + base_prompt.strip()

    return base_prompt.strip()

def generate_section3(input_sec1, input_sec2, with_feedback=False):
    url = "http://localhost:11434/api/generate"

    prompt = create_prompt_for_section3(input_sec1, input_sec2, with_feedback=with_feedback)

    payload = {
        "model": "wangchanglm",
        "prompt": prompt,
        "temperature": 0.2,
        "stream": True
    }
    response = requests.post(url, json=payload, stream=True)

    collected_response = ""
    for line in response.iter_lines():
        if line:
            decoded_line = line.decode('utf-8')
            data = json.loads(decoded_line)
            if 'response' in data:
                collected_response += data['response']

    return collected_response.strip()

def regenerate_section3_with_feedback():
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å session state
    sec1 = st.session_state.get("outgoing_section1", "")
    sec2 = st.session_state.get("outgoing_section2", "")
    
    if not sec1 or not sec2:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠ ‡πë ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠ ‡πë ‡∏Å‡πà‡∏≠‡∏ô")
        return ""

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å generate ‡πÉ‡∏´‡∏°‡πà
    new_section3 = generate_section3(sec1, sec2, with_feedback=True)
    return new_section3


# ---------- FUNCTIONS ----------
def generate_docx(section1, section2, section3):
    doc = Document()

    # üìú ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    style = doc.styles['Normal']
    font = style.font
    font.name = 'TH SarabunPSK'
    font.size = Pt(16)

    doc.add_heading('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', 0)

    # üìú ‡∏Ç‡πâ‡∏≠ ‡πë
    doc.add_paragraph(f'‡πë. {section1}', style='Normal')
    doc.add_paragraph()

    # üìú ‡∏Ç‡πâ‡∏≠ ‡πí
    doc.add_paragraph(f'‡πí. {section2}', style='Normal')
    doc.add_paragraph()

    # üìú ‡∏Ç‡πâ‡∏≠ ‡πì
    doc.add_paragraph(f'‡πì. {section3}', style='Normal')
    doc.add_paragraph()

    # üìú ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ)
    doc.add_paragraph("\n(‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠) ................................................")
    doc.add_paragraph("        (.............................................)  ")

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# ---------- LOAD EMBEDDER ----------
similarity_model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')

# ---------- UI START ----------
st.title("üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡πà‡∏á (Outgoing Letter Creation)")

# üîπ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
reference_output = "‡∏¢‡∏ö.‡∏ó‡∏´‡∏≤‡∏£ (‡∏™‡∏ô‡∏û.‡∏¢‡∏ö.‡∏ó‡∏´‡∏≤‡∏£) ‡∏Å‡πç‡∏≤‡∏´‡∏ô‡∏î‡∏û‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ô‡∏≤‡∏¢‡∏ó‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ó‡∏ß‡∏ô ‡∏™‡∏≤‡∏¢‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà 3 ‡∏õ‡∏£‡∏∞‡∏à‡πç‡∏≤‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡∏û.‡∏®. 2568 ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò‡∏ó‡∏µ‡πà 5 ‡∏û.‡∏¢. 67 ‡πÄ‡∏ß‡∏•‡∏≤ 1300 ‡∏ì ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏´‡∏ó‡∏±‡∏¢‡∏ô‡πÄ‡∏£‡∏® ‡∏ä‡∏±‡πâ‡∏ô 2 ‡∏™‡∏ô‡∏û.‡∏¢‡∏ö.‡∏ó‡∏´‡∏≤‡∏£ (‡∏ö‡∏≤‡∏á‡∏ã‡πà‡∏≠‡∏ô) ‡πÇ‡∏î‡∏¢‡∏°‡∏µ ‡∏à‡∏Å.‡∏¢‡∏ö.‡∏ó‡∏´‡∏≤‡∏£ ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô‡∏Ø ‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏≠‡∏û‡∏±‡∏ö‡πÅ‡∏Ç‡∏ô‡∏¢‡∏≤‡∏ß (‡∏ó‡∏≠. ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏ò‡∏ô‡∏π‡πÅ‡∏Ç‡πá‡∏á) ‡∏á‡∏î‡∏´‡∏°‡∏ß‡∏Å ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ "

if "corrected_sections" not in st.session_state:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö")
else:
    corrected_data = st.session_state["corrected_sections"]
    input_section1 = corrected_data.get("‡∏Ç‡πâ‡∏≠ 1", "").strip()
    input_section2 = corrected_data.get("‡∏Ç‡πâ‡∏≠ 2", "").strip()

    if not input_section1:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠ ‡πë")
    else:
        st.markdown("<div class='earth-card'>", unsafe_allow_html=True)
        st.subheader("üîé ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠ ‡πë (Sec.1 creation)")

        temperature_values = [0.1, 0.2, 0.3, 0.4, 0.5]
        summaries = []
        cosine_scores = []

        with st.spinner('üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• LLM ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô...'):
            for temp in temperature_values:
                summary = abstractive_summarize(input_section2, input_section1, temperature=temp)
                score = calculate_cosine_similarity(reference_output, summary)
                summaries.append(summary)
                cosine_scores.append(score)

        best_idx = np.argmax(cosine_scores)

        for idx, (summary, score) in enumerate(zip(summaries, cosine_scores)):
            color = "#e0ffe0" if idx == best_idx else "#f0f0f0"
            with st.expander(f"üìë ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô {idx+1} (Temp {temperature_values[idx]} / Cosine {score:.4f})", expanded=(idx==best_idx)):
                st.markdown(f"<div style='background-color:{color}; padding:15px; border-radius:10px;'>{summary}</div>", unsafe_allow_html=True)

        options = [f"‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô {i+1} (temp={temperature_values[i]}, similarity={cosine_scores[i]:.4f})" for i in range(len(summaries))]
        default_option = options[best_idx]  # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô String ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        selected = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô (Select best version)", options, index=options.index(default_option))

        selected_summary = summaries[options.index(selected)]

        edited_section1 = st.text_area("üìã ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ ‡πë (customize for sec.1)", value=selected_summary, height=300)
        st.markdown("</div>", unsafe_allow_html=True)

    # ------------------ 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠ 1 ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠ 2 ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ------------------
    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠ ‡πë (Confirm Sec.1)"):
        if edited_section1.strip():
            # Save ‡∏Ç‡πâ‡∏≠ 1
            st.session_state["outgoing_section1"] = edited_section1

            # Generate ‡∏Ç‡πâ‡∏≠ 2 ‡∏à‡∏≤‡∏Å ‡∏Ç‡πâ‡∏≠ 1 ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            with st.spinner('‚úèÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á ‡∏Ç‡πâ‡∏≠ ‡πí...'):
                st.session_state["generated_section2"] = generate_fact_from_sec1(edited_section1)

            st.session_state["confirmed_sec1"] = True
            st.success("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠ ‡πë ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠ ‡πí ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠ ‡πí")

    # ------------------ 2. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠ 2 ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ------------------
    if st.session_state.get("confirmed_sec1") and "generated_section2" in st.session_state:
        st.subheader("üìã ‡∏Ç‡πâ‡∏≠ ‡πí: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")

        edited_section2 = st.text_area(
            "üìã ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ ‡πí (Customize Sec.2)", 
            value=st.session_state["generated_section2"],
            height=300,
            key="section2_editor"
        )

        if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠ ‡πí (Confirm Sec.2)"):
            st.session_state["outgoing_section2"] = edited_section2
            st.session_state["confirmed_sec2"] = True
            st.success("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠ ‡πí ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠ ‡πì ‡∏ï‡πà‡∏≠‡πÑ‡∏õ")

    # ------------------ 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠ 3 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠ 2 ------------------
    if st.session_state.get("confirmed_sec2"):
        st.subheader("‚úçÔ∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠ ‡πì (Sec.3 Creation)")

        with st.spinner('üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠ ‡πì...'):
            sec1 = st.session_state["outgoing_section1"]
            sec2 = st.session_state["outgoing_section2"]
            sec3_with_feedback = generate_section3(sec1, sec2, with_feedback=True)
            sec3_without_feedback = generate_section3(sec1, sec2, with_feedback=False)

        choice_sec3 = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠ ‡πì", ["‡∏°‡∏µ Feedback", "‡πÑ‡∏°‡πà‡∏°‡∏µ Feedback"], index=0)

        if choice_sec3 == "‡∏°‡∏µ Feedback":
            if "edited_sec3_feedback" not in st.session_state:
                st.session_state["edited_sec3_feedback"] = sec3_with_feedback
            selected_sec3 = st.session_state["edited_sec3_feedback"]
        else:
            selected_sec3 = sec3_without_feedback

        edited_section3 = st.text_area(
            "üìã ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ ‡πì (Customize Sec.3)", 
            value=selected_sec3,
            height=300,
            key="section3_editor"
        )

        # ‡∏õ‡∏∏‡πà‡∏° Regenerate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Feedback ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if choice_sec3 == "‡∏°‡∏µ Feedback":
            if st.button("üîÑ Regenerate ‡∏Ç‡πâ‡∏≠ ‡πì (‡∏°‡∏µ Feedback)"):
                new_sec3 = regenerate_section3_with_feedback()
                st.session_state["edited_sec3_feedback"] = new_sec3
                st.rerun()

        if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠ ‡πì (Confirm Sec.3)", key="confirm_sec3_button"):
            st.session_state["outgoing_section3"] = edited_section3
            st.session_state["confirmed_sec3"] = True
            st.success("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠ ‡πì ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Preview ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")

    # ------------------ 4. Preview ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ç‡πâ‡∏≠ ------------------
    if all(st.session_state.get(k) for k in ["confirmed_sec1", "confirmed_sec2", "confirmed_sec3"]):
        st.markdown("<div class='earth-card'>", unsafe_allow_html=True)
        st.subheader("üìã Preview ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡πà‡∏á")

        kru_logo = "kru_logo.png"
        st.image(kru_logo, width=100)

        st.markdown("<h3 style='text-align: center;'>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</h3>", unsafe_allow_html=True)

        corrected_data = st.session_state.get("corrected_sections", {})
        st.markdown(f"""
        **‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£**: {corrected_data.get('‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}  
        **‡∏ó‡∏µ‡πà**: {corrected_data.get('‡∏ó‡∏µ‡πà', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}  
        **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà**: {corrected_data.get('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}  
        **‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á**: {corrected_data.get('‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}  
        **‡πÄ‡∏£‡∏µ‡∏¢‡∏ô**: {corrected_data.get('‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}
        """, unsafe_allow_html=True)

        if corrected_data.get("‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á"):
            st.markdown(f"**‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á**: {corrected_data.get('‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á')}")
        if corrected_data.get("‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢"):
            st.markdown(f"**‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢**: {corrected_data.get('‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢')}")

        st.markdown("<br>", unsafe_allow_html=True)

        section_contents = [
            ("‡πë", f"‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà {st.session_state['outgoing_section1']}"),
            ("‡πí", st.session_state["outgoing_section2"]),
            ("‡πì", f"‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ {st.session_state['outgoing_section3']}")
        ]

        for thai_number, display_content in section_contents:
            st.markdown(f"""
            <div style='text-indent: 2em; font-size: 1.1rem; line-height: 1.8;'>
                <strong>{thai_number}.</strong> {display_content}
            </div>
            <br>
            """, unsafe_allow_html=True)

        st.markdown("""
        <p style='text-align: right;'>
            (‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠) ................................................<br>
            (.............................................)
        </p>
        """, unsafe_allow_html=True)

        st.success("‚úÖ ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

        st.markdown("</div>", unsafe_allow_html=True)

        docx_file = generate_docx(
            st.session_state["outgoing_section1"],
            st.session_state["outgoing_section2"],
            st.session_state["outgoing_section3"]
        )

        st.download_button(
            "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î DOCX",
            data=docx_file,
            file_name="Outgoing_Letter.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )

